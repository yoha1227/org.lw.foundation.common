/*
 1、判定dojoConfig变量是否定义和被赋值，从而确定调用本metaInfo.json的网页是否系被其上一级的网页调用
 1a、如果系被其上一级的网页调用，则dojo路径、上级目录和common公用目录下的所有define元素均已被注册
 1b、如果系直接调用（例如用于单元测试），则要在html文件中引用本js程序，将从本级目录开始向上（父）递归，直到根目录为止，
 进行metaInfo.json的读取和包注册的meta_info.js，从而开启一次全面注册，以注册到所有的define元素
*/

if ('undefined' == typeof dojoConfig) {
	var dojoConfig = null;
};

function registerOnDoc() {

	//Path refer to url without protocol + host prefix
	//DirPath refer to Path for a directory not file
	//DirUrl refer to Url for a directory not file
	//RelatedPath refer to related path to base path, such as "../../dirname/filename"
	var currentHtmlUrl = location.href;
	var currentHtmlPath = location.pathname;
	var currentHtmlDirPath = currentHtmlPath.substr(0, currentHtmlPath.lastIndexOf("/"));
	
	var relatedPathLevel;
	
	//root url of current application, same as appBaseDirUrl
	var appBaseUrl;
	
	if (('undefined' != typeof appContextPath) && (null != appContextPath)) {
		appBaseUrl = location.protocol + "//" + location.host + appContextPath;
		
		relatedPathLevel = countRelatedPathLevelunderBase(appContextPath, currentHtmlDirPath);
	} else {
		//get the related path segments from the script<configMetaInfo.js> setting in html
		var metaInfoConfigRelatedPath = findMetaInfoConfigRelatedPath(document);

		var metaInfoConfigUrl = absolutizeURI(currentHtmlUrl, metaInfoConfigRelatedPath);
		var metaInfoConfigPath = absolutizeURI(currentHtmlPath, metaInfoConfigRelatedPath);
		appBaseUrl = metaInfoConfigUrl.substr(0, metaInfoConfigUrl.lastIndexOf("/"));
		appContextPath = metaInfoConfigPath.substr(0, metaInfoConfigPath.lastIndexOf("/"));
		
		relatedPathLevel = countRelatedPathLevel(metaInfoConfigRelatedPath);
	}
	
	//root url of current application
	var dojoBaseUrl = null;
	
	//register from app base directory
	var appBaseMetaInfoPath;
	
	if (null == dojoConfig) {
//		console.debug("dojoConfig not define or null, should load dojo.js");
		
		appBaseMetaInfoPath = appContextPath + "/metaInfo.json";
		
		new fiji.xhr('get', appBaseMetaInfoPath, function() {
			  if (this.readyState == 4 && this.status == 200) {
				  
				  var appBaseMetaInfo = parseJSON(this.responseText);
				  
				  dojoBaseUrl = appBaseMetaInfo.dojoBaseUrl;
				  dojoConfig = appBaseMetaInfo.dojoConfig;
				  
				  dojoConfig.baseUrl = dojoBaseUrl.substr(0, dojoBaseUrl.lastIndexOf("/"));
				  dojoConfig.dojoBlankHtmlUrl = appContextPath + "/blank.html";
				  
				  dojoConfig.appBaseUrl = appBaseUrl;
				  dojoConfig.appContextPath = appContextPath;
				  
				  dojoConfig.dojoBaseUrl = dojoBaseUrl;
				  
				  var appConfig = appBaseMetaInfo.appConfig;
				  dojoConfig.application = appConfig;
				  
				  var dojoExtPackages = appBaseMetaInfo.dojoExtPackages;
				  
				  registerDojoPackages(dojoConfig, appBaseMetaInfoPath, dojoExtPackages);
				  
			  }
			}, false).send();	//should set async to false for wait for xhr return json		
	}
	
	//recursive register from current directory up to its parent directory until at app root
	var tagertRegisterDirPath = currentHtmlDirPath;
	
	for (var i = 0; i < relatedPathLevel; i++) {
		var tagertMetaInfoPath = tagertRegisterDirPath + "/metaInfo.json";
		tagertRegisterDirPath = tagertRegisterDirPath.substr(0, tagertRegisterDirPath.lastIndexOf("/"));
		
		//check is up to app root
		if (tagertMetaInfoPath == appBaseMetaInfoPath) {
			break;
		}
		
		new fiji.xhr('get', tagertMetaInfoPath, function() {
			  if (this.readyState == 4 && this.status == 200) {
				  var metaInfo = parseJSON(this.responseText);
				  
				  var dojoExtPackages = metaInfo.dojoExtPackages;
				  
				  registerDojoPackages(dojoConfig, tagertMetaInfoPath, dojoExtPackages);
				  
			  }
			}, false).send();	//should set async to false for wait for xhr return json		
	}

	//after all dojoConfig register, then load the dojo.js
//	if ((findDojoCorePath(document) == null) && (dojoBaseUrl != null)) {
	if (dojoBaseUrl != null) {
		//for cross domain access, should use follow function not loadScriptAndEval
		writeScriptToDocHead(document, dojoBaseUrl);
	}

}

function countRelatedPathLevelunderBase (basePath, targetPath){
	var counter = 0;
	var absPath = targetPath;
	while (absPath != basePath) {
		counter++;
		absPath = absPath.substr(0, absPath.lastIndexOf("/"));
	}
	return counter;
}

function countRelatedPathLevel (targetRelatedPath){
	var counter = 0;
	var relatedPath = targetRelatedPath;
	while (relatedPath.lastIndexOf("/") > 0) {
		counter++;
		relatedPath = relatedPath.substr(0, relatedPath.lastIndexOf("/"));
	}
	return counter;
}

function registerDojoPackages(dojoConfig, baseUrl, dojoExtPackages) {
	
	for (var i = 0; i < dojoExtPackages.length; i++) {
		var dojoPackage = dojoExtPackages[i];
		var registerUrl = absolutizeURI(baseUrl, dojoPackage.location + "/filename");
		registerUrl = registerUrl.substr(0, registerUrl.lastIndexOf("/"));
		dojoConfig.packages.push({
	        name: dojoPackage.name,
	        location: registerUrl
	      });
	}
}

function findMetaInfoConfigRelatedPath(doc) {
	
	var regExp = /(((.*)\/)|^)configMetaInfo\.js(\W|$)/i;
	return findScriptPath(doc, regExp);
}

function findDojoCoreRelatedPath(doc) {
	
	var regExp = /(((.*)\/)|^)dojo\.js(\W|$)/i;
	return findScriptPath(doc, regExp);
}

function findScriptPath(doc, regExp) {
	
	var scripts = doc.getElementsByTagName("script");
	
	var script, src, match;
	var matchedDir = null;

	var i = scripts.length - 1;
	while (i >= 0) {
		script = scripts[i];
		if ((src = script.getAttribute("src"))
				&& (match = src.match(regExp))) {
			// sniff dojoDir and baseUrl
			matchedDir = match[0] || "";
			break;
		}
		i--;
	}
	
	return matchedDir;
	
}

function loadScriptAndEval(doc, absUrl)
{
	new fiji.xhr('get', absUrl, function() {
      if (this.readyState == 4 && this.status == 200) {
	  	try{
            eval(this.responseText);
		}catch(e){
			throw new Error("error in load srcipt of : " + absUrl);
		}
      }
    }, false).send();
}

function writeScriptToDocHead(doc, absUrl)
{
	var scriptText = "<script type=\"text/javascript\" ";
	scriptText += " src=" + absUrl;
	scriptText += " ><\/script>";
	
	doc.write(scriptText);
}

function appendScriptToDocHead(doc, absUrl, callback)
{
   // adding the script tag to the head
   var head = doc.getElementsByTagName('head')[0];
   var script = doc.createElement('script');
   script.type = 'text/javascript';
   script.src = absUrl;
   
   script.async = false;

   // then bind the event to the callback function 
   // there are several events for cross browser compatibility
   script.onreadystatechange = callback;
   script.onload = callback;

   // fire the loading
   head.appendChild(script);
   
//   var firstChildNode = head.children[0];
//   head.insertBefore(script, firstChildNode);
   
}

function getCurrentDirPath(location) {
	var filePath = location.pathname.substr(0, location.pathname
			.lastIndexOf("/"));
	var dirPath = location.protocol + "//" + location.host + location.port + filePath;

	return dirPath;
}

/**
 * Parses the URI
 * 
 * @param url
 * @returns object
 */
function parseURI(url) {
	var parseURIMatcher = /^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/;

	var m = parseURIMatcher.exec(url);
	// authority = '//' + user + ':' + pass '@' + hostname + ':' port
	return (m ? {
		href : m[0] || '',
		protocol : m[1] || '',
		authority : m[2] || '',
		host : m[3] || '',
		hostname : m[4] || '',
		port : m[5] || '',
		pathname : m[6] || '',
		search : m[7] || '',
		hash : m[8] || ''
	} : null);
}

/**
 * Absolutizes the path in `href` based on `base` url.
 * 
 * @param base		Base URI
 * @param href		Path which to convert absolute
 * 
 * @returns Absolute URI
 */
function absolutizeURI(base, href) {// RFC 3986
	function removeDotSegments(input) {
		var output = [];
		input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/')
				.replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function(p) {
					if (p === '/..') {
						output.pop();
					} else {
						output.push(p);
					}
				});
		return output.join('');
	}

	href = parseURI(String(href || '').replace(/^\s+|\s+$/g, ''));
	base = parseURI(String(base || '').replace(/^\s+|\s+$/g, ''));
	
	if (href === null || base === null) {
		return null;
	}
	var res = {};
	if (href.protocol || href.authority) {
		res.authority = href.authority;
		res.pathname = removeDotSegments(href.pathname);
		res.search = href.search;
	} else {
		if (!href.pathname) {
			res.pathname = base.pathname;
			res.search = href.search || base.search;
		} else {
			if (href.pathname.charAt(0) === '/') {
				res.pathname = removeDotSegments(href.pathname);
			} else {
				if (base.authority && !base.pathname) {
					res.pathname = removeDotSegments('/' + href.pathname);
				} else {
					res.pathname = removeDotSegments(base.pathname.slice(0,
							base.pathname.lastIndexOf('/') + 1)
							+ href.pathname);
				}
			}
			res.search = href.search;
		}
		res.authority = base.authority;
	}
	
	res.protocol = href.protocol || base.protocol;
	res.hash = href.hash;
	
	return res.protocol + res.authority + res.pathname + res.search + res.hash;
}

/**
 * XMLHttpRequest Wrapper Object
 * @copyright Fiji Web Deisgn, GNU/GPL
 * @author gabe@fijiwebdesign.com
 * @url www.fijiwebdesign.com
 * @version 0.1
 */

// make sure we have our fiji namespace
if (typeof(fiji) == 'undefined') {
	fiji = {};
}

/**
 * Constructor
 * @param {String} method (POST | GET)
 * @param {String} url 
 * @param {Function} callback
 * @param {Bool} async Optional Mode, defaults to Asynchronous
 */ 
fiji.xhr = function(method, url, callback, async) {
	this._init(method, url, callback, async);
};
/**
 * @static ie_activex
 * Holds IE6- XHR ActiveX version
 */
fiji.xhr.ie_activex = false;
	
/**
 * @Prototype Inherited Methods
 */
fiji.xhr.prototype = {
	
	/**
	 * Output Logging function
	 */
	debug: function(str) {},
	
	/**
	 * Constructor
	 * @param {String} method
	 * @param {String} url
	 * @param {Function} callback
	 * @param {Bool} async
	 */
	_init: function(method, url, callback, async) {
		if (method && url && callback) {
			this.req(method, url, callback, async);	
		}
	},

	/**
	 * Returns the platform dependent XHR Instance
	 */
	getXHR: function() {
		if (window.XMLHttpRequest) {
	        return new XMLHttpRequest();
	    } else if (window.ActiveXObject) {
	        if (fiji.xhr.ie_activex) {
	            return new ActiveXObject(fiji.xhr.ie_activex);
	        } else {
			    var axs = [
					"Msxml2.XMLHTTP.6.0", 
					"Msxml2.XMLHTTP.5.0", 
					"Msxml2.XMLHTTP.4.0", 
					"MSXML2.XMLHTTP.3.0", 
					"MSXML2.XMLHTTP",
					"Microsoft.XMLHTTP"
				];
	            for (var i = 0; i < axs.length ; i++) {
	                try {
	                    var xhr = new ActiveXObject(axs[i]);
	                    if (xhr) {
	                        fiji.xhr.ie_activex = axs[i];
							return xhr;
	                        break;
	                    }
	                }
	                catch (e) {/* next */}
	            }
	        }
	    }
		return false;
	},
	
	/**
	 * Create XMLHttpRequest
	 * @param {String} method
	 * @param {String} url
	 * @param {Function} callback
	 * @param {Bool} async
	 */
	req: function(method, url, callback, async) {
		// closure
	    var self = this;
	    self.xhr = this.getXHR();
	    self.callback = callback;
		method = method.toUpperCase();
		
	    // handles state changes
	    self.xhr.onreadystatechange = function( ) {
			try {
				self.callback.apply(self.xhr, [self]);
			} catch(e) {
				this.debug(e);
			}
	    }
	
	    self.xhr.open(method, url, (async === false ? false : true));
	
	    if (method == "POST") {
	        self.xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
	        self.xhr.setRequestHeader("Method", "POST " + url + " HTTP/1.1");
	    }
		
		this.debug('new '+method+': '+url);
		
	    return self.xhr;
	},
	
	/**
	 * Stringify Object Parameters
	 * @param {Object} parameters
	 */
	stringifyParams: function(data) {
		// stringify data
		var params = '';
		for(var x in data) {
			if (data.hasOwnProperty(x)) {
				params += '&'+this.encode(x)+'='+this.encode(data[x].toString());
			}
		}
		return params;
	},
	
	/**
	 * Send the XHR request
	 * @param {Mixed} Data. Can be an Object to strigify or String Data
	 */
	send: function (data) {
		if (typeof(data) != 'string') {
			data = this.stringifyParams(data);
		}
		this.debug('sending:'+data);
		this.xhr.send(data);
	},
	
	/**
	 * Encode a url parameter
	 * @param {String} str
	 */
	encode: function(str) {
		return encodeURIComponent ? encodeURIComponent(str) : escape(str);
	}
};

/**
 * Parse JSON string to js array/object
 * @param {String} jsonstring
 * 
 */
function parseJSON(jsonstring, strict){
    if((typeof JSON != "undefined" && JSON.stringify({a:0}, function(k,v){return v||1;}) == '{"a":1}')){
        return JSON.parse(jsonstring, strict);
    }else{
        if(strict && !/^([\s\[\{]*(?:"(?:\\.|[^"])+"|-?\d[\d\.]*(?:[Ee][+-]?\d+)?|null|true|false|)[\s\]\}]*(?:,|:|$))+$/.test(jsonstring)){
            throw new Error("Invalid characters in JSON");
        }
        return eval('(' + jsonstring + ')');
    }

}

/**
 * Main Entry Point for js file
 * after all function register finish then call main entry
 */
(function mainEntry () {
	registerOnDoc();
})();

//end of script file
