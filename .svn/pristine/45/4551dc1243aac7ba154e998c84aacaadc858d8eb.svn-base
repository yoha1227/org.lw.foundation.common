require([
		"dijit/registry",
		"dojo/on",
		"dojo/dom",
		"dojo/dom-attr",
		"dojo/Stateful",
		"dojo/request",
		"affairService/affairEntryDaoStub",
		"dojox3rd/mvc/mvcUtils",
		"dojox3rd/utils/urlParsers",
		"dojo/store/Memory",
		"dojo/dom-geometry",
		"dojo/json",
		"dojo/ready", 
		"dojo/when", 
		"dojo/parser" ],
	function(registry, on, dom, domAttr, Stateful, request,
				affairEntryDao, mvcUtils, urlParsers, Memory, domGeometry, json, ready, when, parser) {
			
		var viewScopePrefix = "affair_assign";
		
		var affairEntryForm;
		var affairEntryDetailForm;
		var customerInfoViewer;
        var affairEntryDaoObject;
		var urlParams = urlParsers.getUrlParams();
		
		if (urlParams['affair_id']){
			affairEntryDaoObject = affairEntryDao.getEntityById(urlParams['affair_id']);
		}else if(parent && parent.dojo && parent.dojo.cur_affair_id != "undefined"){
			affairEntryDaoObject = affairEntryDao.getEntityById(parent.dojo.cur_affair_id);
		}else{
			affairEntryDaoObject = affairEntryDao.getDefaultEntity();
		}
		
		// load default entity value from server
		affairEntryDaoObject.then(function(response){
			
			// variables from global
			defaultAffairEntry = response;
			
//			console.log(response);
//			return;
			
			defaultAffairEntryDetail = defaultAffairEntry.affairEntryDetail;
			defaultCustomerInfo =  defaultAffairEntry.associatedCustomer;
			operateHistoryStore = new Memory({data: [], idProperty: "operateStep"});
				
//			defaultAffairEntry.affairEntryDetail = null;
			defaultAffairEntry.assistUsers = null;
//			defaultAffairEntry.associatedCustomer = null;
			defaultAffairEntry.responseUser = null;
//			defaultAffairEntry.knowledgeFromAffairs = {};

			// mvc/Building: building view/controller and binding entities
//			return parser.parse({
//				rootNode: viewScopePrefix + "-" + "RootNode"
//				});
		}).then(function() {
			// mvc/View: get views with model and controller
//			parser.then(function(){
			parser.parse({
                rootNode: viewScopePrefix + "-" + "RootNode"
                }).then(function(){
					//调用then后，并不能保证所有widget已经生成。因此经常会出现提交事件未绑定的情况。
					setTimeout(function(){
						
				affairEntryForm = registry.byId(viewScopePrefix + "-" + "affairEntryForm");
				affairEntryDetailForm = registry.byId(viewScopePrefix + "-" + "affairEntryDetailForm");
				customerInfoViewer = registry.byId(viewScopePrefix + "-" + "customerInfoViewer");
				affairOperateHistoryPane = registry.byId(viewScopePrefix + "-" + "affairOperateHistoryPane");
				
	//			console.log(dom.byId(viewScopePrefix + "-" + "submitBtn"))
				// mvc/Event: submit the data to server
				on(dom.byId(viewScopePrefix + "-" + "submitBtn"), "click", function() {
					var affairEntry = affairEntryForm.submitToEntity();
					var affairEntryDetail = affairEntryDetailForm.submitToEntity();
	
					//for new entity at server, id should set null
	//				affairEntry.id = null;
	//				affairEntryDetail.id = null;
					for (var item in affairEntry.knowledgeFromAffairs) {
						affairEntry.knowledgeFromAffairs[item].id = null;						
					}
						
					affairEntry.affairEntryDetail = affairEntryDetail;
					
	                if (affairEntry.responseUser){
						affairEntry.responseUser = {"id":affairEntry.responseUser,"departments":[]};
					}
					if (affairEntry.assistUsers){
						affairEntry.assistUsers = [{"id":affairEntry.assistUsers,"departments":[]}];
					}
					
					if(affairEntry.finishTimeLimit){
						affairEntry.finishTimeLimit = (new Date(affairEntry.finishTimeLimit)).getTime();
					}
					if(affairEntry.acceptTimeLimit){
						affairEntry.acceptTimeLimit = (new Date(affairEntry.acceptTimeLimit)).getTime();
					}
					
				    if (!affairEntry.id){
						alert("事件信息不合法！");
					   return false;	
					}
					
					affairEntryDao.updateEntity(affairEntry).then(function(response){
						
						alert("提交成功!");
					}, function(err) {
						
						alert("提交错误:" + err);
					});
				});
					
				// mvc/Event: rebase new data to form
				on(dom.byId(viewScopePrefix + "-" + "rebaseBtn"), "click", function() {			
					affairEntryForm.rebaseFromEntity(defaultAffairEntry);
					affairEntryDetailForm.rebaseFromEntity(defaultAffairEntryDetail);
				});
	            
				// mvc/Event: reset the data in form to default
				on(dom.byId(viewScopePrefix + "-" + "cleanBtn"), "click", function() {
					affairEntryForm.clean();
					affairEntryDetailForm.clean();
				});
	
				// mvc/Event: revert the original data to model and them to form
				on(dom.byId(viewScopePrefix + "-" + "undoBtn"), "click", function() {
					affairEntryForm.undo();
					affairEntryDetailForm.undo();
				});
								
				// mvc/Event: restore the new data to model and them to form
				on(dom.byId(viewScopePrefix + "-" + "redoBtn"), "click", function() {
					affairEntryForm.redo();
					affairEntryDetailForm.redo();
				});
				
				var customerSize = domGeometry.getContentBox(customerInfoViewer.tableNode);
                domGeometry.setContentSize( affairOperateHistoryPane.gridWidgetNode.domNode, {h: customerSize.h} );
				
			}, 100);
		  });
	   });
});
